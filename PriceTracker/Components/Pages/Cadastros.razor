@page "/cadastros"
@using PriceTracker.Components.Pages.States
@using PriceTracker.DTO
@using PriceTracker.Interfaces
@using PriceTracker.Models
@using PriceTracker.Services
@using ZXingBlazor.Components
@inject IProductRepository produtoRepository
@inject IProductVariationRepository produtoVariacaoRepository
@inject NavigationManager NavigationManager
@inject BarcodeState BarcodeState
@inject AppSharedState SharedState
@inject SweetAlertService Swal

<div class="page">
    <h1 class="page-title">Cadastros</h1>

    <div class="search-bar">
        <MudTextField Immediate ValueChanged="OnSearchTermChanged" T="string"
        Class="w-100" Value="searchTerm" Label="Pesquisar..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Dark" />
    </div>

    <div class="filter-container">
        @* <button class="filter-item @(_selectedFilter == selectedFilter.All ? "active" : "")" *@
        @* @onclick="() => OnFilterChanged(selectedFilter.All)"> *@
        @*     Todos *@
        @* </button> *@
        <button class="filter-item @(_selectedFilter == selectedFilter.Product ? "active" : "")"
        @onclick="() => OnFilterChanged(selectedFilter.Product)">
            Produtos
        </button>
        <button class="filter-item @(_selectedFilter == selectedFilter.Brand ? "active" : "")"
        @onclick="() => OnFilterChanged(selectedFilter.Brand)">
            Marcas
        </button>
        <button class="filter-item @(_selectedFilter == selectedFilter.Store ? "active" : "")"
        @onclick="() => OnFilterChanged(selectedFilter.Store)">
            Mercados
        </button>
    </div>


    <div class="product-list">
        @foreach (var item in cadastros)
        {
            <div class="cadastro-card">
                <div class="left-side">
                    @if (item.Type == ListItemType.Product)
                    {
                        <span class="name-span">@item.Name</span>
                    }
                    else
                    {
                        <span class="name-span">@item.Name</span>
                    }
                </div>
                <div class="right-side">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDeleteCadastro(item)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditCadastro(item.Id, (int)item.Type)" />
                </div>
            </div>
        }

    </div>
</div>


@code {

    private enum selectedFilter
    {
        All,
        Product,
        Brand,
        Store
    }

    private selectedFilter _selectedFilter = selectedFilter.All;

    CancellationTokenSource? _debounceCts;

    private void EditCadastro(string id, int tipo)
    {
        NavigationManager.NavigateTo($"/cadastro/{id}/{tipo}");
    }
    private async Task OnSearchTermChanged(string value)
    {
        searchTerm = value;

        _debounceCts?.Cancel();
        _debounceCts = new CancellationTokenSource();
        var token = _debounceCts.Token;

        try
        {
            await Task.Delay(300, token);
            if (!token.IsCancellationRequested)
            {
                await LoadCadastros();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignorado
        }
    }

    string searchTerm = "";
    List<ListItemDTO> cadastros = new();

    ProductClass? produtoExistente = null;
    string nomeProduto = string.Empty;

    async Task LoadCadastros()
    {
        string? filter = _selectedFilter switch
        {
            selectedFilter.Product => "Product",
            selectedFilter.Brand => "Brand",
            selectedFilter.Store => "Store",
            _ => null // All
        };

        cadastros = await produtoRepository.GetAllCadastrosAsync(searchTerm, filter);
    }

    protected override async Task OnInitializedAsync()
    {
        SharedState.SetNavigationManager(NavigationManager);
        SharedState.PushRoute(NavigationManager.Uri);
        await LoadCadastros();

    }

    private async Task OnFilterChanged(selectedFilter filter)
    {
        if (_selectedFilter != filter)
        {
            _selectedFilter = filter;
            await LoadCadastros();
            StateHasChanged();
        }
    }

    private async Task OnDeleteCadastro(ListItemDTO item)
    {
        var ok = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmação",
                Text = $"Você tem certeza que deseja deletar o cadastro '{item.Name}'?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sim, deletar",
                CancelButtonText = "Cancelar"
            });

        if (ok.IsConfirmed)
        {
            var deleted = await produtoRepository.DeleteCadastroAsync(item.Id, item.Type);
            if (deleted)
            {
                await LoadCadastros();
            }
            else
            {
               await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Erro",
                        Text = "Não foi possível deletar o cadastro. Verifique se existem registros relacionados.",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "OK"
                    });
            }
        }
        else
        {
            return;
        }
    }


}