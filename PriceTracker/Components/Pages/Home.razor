@page "/"
@using PriceTracker.Components.Pages.States
@using PriceTracker.DTO
@using PriceTracker.Interfaces
@using PriceTracker.Models
@using PriceTracker.Services
@using ZXingBlazor.Components
@inject IProductRepository produtoRepository
@inject IProductVariationRepository produtoVariacaoRepository
@inject NavigationManager NavigationManager
@inject BarcodeState BarcodeState
@inject AppSharedState SharedState
@inject IJSRuntime JS

<div class="page">
    <h1 class="page-title">Últimos registros</h1>

    <div class="search-bar">
        <MudTextField Immediate ValueChanged="OnSearchTermChanged" T="string"
                      Class="w-100" Value="searchTerm" Label="Pesquisar..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Dark" />
    </div>

<div class="product-list">
        @foreach (var item in produtos)
        {
            <div class="prod-card" @onclick="() => NavigateToProduct(item.Barcode)">
                <div class="left-side">
                    <span class="date-span">@item.Date?.ToString("dd/MM/yy HH:mm")</span>
                    <span class="name-span">@item.Name</span>
                    <span class="brand-span">@item.Brand</span>
                </div>
                <div class="right-side">
                    <span class="price-span">@item.Price?.ToString("C2")</span>
                    <span class="store-span">@item.Store</span>
                </div>
            </div>
        }
    </div>
    <div class="w-100 d-flex justify-content-center mt-auto">
        <MudPagination Style="padding:0" Color="Color.Primary" Count="@totalPages" Selected="_selected" SelectedChanged="OnPageChanged" />
    </div>
</div>

@code {
    
    CancellationTokenSource? _debounceCts;

    int _selected = 1;
    int pageSize = 10;
    int totalPages = 1;

    private void NavigateToProduct(string barcode)
    {
        NavigationManager.NavigateTo($"/product/{barcode}");
    }
    private async Task OnSearchTermChanged(string value)
    {
        searchTerm = value;

        _debounceCts?.Cancel();
        _debounceCts = new CancellationTokenSource();
        var token = _debounceCts.Token;

        try
        {
            await Task.Delay(300, token);
            if (!token.IsCancellationRequested)
            {
                await LoadProdutos();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignorado
        }
    }

    async Task ScanBarcode()
    {
        var scanner = new ZXing.Mobile.MobileBarcodeScanner();
        scanner.UseCustomOverlay = false; // Usa o overlay padrão
        scanner.TopText = "Aponte para o código de barras";
        scanner.BottomText = "O scanner irá ler automaticamente";

        var result = await scanner.Scan();
        if (result != null)
        {
            BarcodeState.Barcode = result.Text;
            NavigationManager.NavigateTo("/register-price");
        }
    }

    string searchTerm = "";
    List<ProductListDTO> produtos = new();


    async Task LoadProdutos()
    {
        var paged = await produtoRepository.GetPagedAsync(_selected, pageSize, searchTerm);
        produtos = paged.Items;
        totalPages = (int)Math.Ceiling((double)paged.TotalCount / pageSize);
        StateHasChanged();
    }

    private async Task OnPageChanged(int page)
    {
        _selected = page;
        await LoadProdutos();
    }

    protected override async Task OnInitializedAsync()
    {
        SharedState.SetNavigationManager(NavigationManager);
        SharedState.PushRoute(NavigationManager.Uri);
        await LoadProdutos();

    }
}